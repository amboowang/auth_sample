events {
}

http {
    # server {
    #     listen 80;
    #     server_name localhost;

    #     return 301 https://$server_name$request_uri;
    # }

    server {
        # listen 443 ssl http2;
        listen 80;
        server_name localhost;

        # ssl_certificate /etc/ssl/certs/localhost.crt;
        # ssl_certificate_key /etc/ssl/private/localhost.key;

        # ssl_protocols TLSv1.2 TLSv1.1 ;

        location = /auth {
            internal;
            # be sure to pass the original host header
            # proxy_set_header Host $http_host;

            proxy_pass http://192.168.198.128:8080/auth;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;

            # 
            auth_request_set $auth_resp_x_auth_token $upstream_http_x_auth_token;
        }

        # location ~ ^/(/login|/logout)? {
        #     proxy_pass http://192.168.198.128:8080;
        # }


        location / {
            auth_request /auth;
            auth_request_set $auth_resp_x_auth_token $upstream_http_x_auth_token; # this line is must

            proxy_pass http://192.168.198.128:9001;

            proxy_set_header X-Auth-Token $auth_resp_x_auth_token;
        }

        # if validate returns `401 not authorized` then forward the request to the error401block
        error_page 401 = @error401;

        location @error401 {
            # redirect to auth server for login
            return 302 http://192.168.198.128:8080/login;
        }        
    }
}